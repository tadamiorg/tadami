import kotlin.Boolean;
import kotlin.String;
import kotlin.collections.List;

CREATE TABLE Anime (
  _id INTEGER NOT NULL PRIMARY KEY,
  source INTEGER NOT NULL,
  url TEXT NOT NULL,
  title TEXT NOT NULL,
  thumbnail_url TEXT,
  release TEXT,
  status TEXT,
  description TEXT,
  genres TEXT AS List<String>,
  last_update INTEGER,
  next_update INTEGER,
  calculate_interval INTEGER DEFAULT 0 NOT NULL,
  favorite INTEGER AS Boolean NOT NULL DEFAULT 0,
  initialized INTEGER AS Boolean NOT NULL DEFAULT 0,
  episode_flags INTEGER NOT NULL,
  date_added INTEGER NOT NULL
);

CREATE INDEX animes_favorite_index ON Anime(favorite) WHERE favorite = 1;
CREATE INDEX anime_url_index ON Anime(url);

getBySourceAndUrl:
SELECT
    _id,
    source,
    url,
    title,
    thumbnail_url,
    release,
    status,
    description,
    genres,
    last_update,
    next_update ,
    calculate_interval,
    favorite,
    initialized,
    episode_flags,
    date_added
FROM Anime
WHERE url = :url AND source = :source
LIMIT 1;

getAll:
SELECT
    _id,
    source,
    url,
    title,
    thumbnail_url,
    release,
    status,
    description,
    genres,
    last_update,
    next_update ,
    calculate_interval,
    favorite,
    initialized,
    episode_flags,
    date_added
FROM Anime;

getById:
SELECT
    _id,
    source,
    url,
    title,
    thumbnail_url,
    release,
    status,
    description,
    genres,
    last_update,
    next_update ,
    calculate_interval,
    favorite,
    initialized,
    episode_flags,
    date_added
FROM Anime
WHERE _id = :animeId;

delete:
DELETE FROM Anime
WHERE _id IN :animeId;

insert:
INSERT INTO Anime(source, url, title, thumbnail_url, release, status, description, genres, last_update,next_update,calculate_interval,favorite, initialized,episode_flags,date_added)
VALUES (:source,:url,:title,:thumbnailUrl,:release,:status,:description,:genres,:lastUpdate,:nextUpdate,:calculateInterval,:favorite,:initiliazed,:episodeFlags,:dateAdded);

update:
UPDATE Anime
SET source = coalesce(:source, source),
    url = coalesce(:url, url),
    title = coalesce(:title, title),
    thumbnail_url = coalesce(:thumbnailUrl, thumbnail_url),
    release = coalesce(:release, release),
    status = coalesce(:status, status),
    description = coalesce(:description, description),
    genres = coalesce(:genres, genres),
    last_update = coalesce(:lastUpdate, last_update),
    next_update = coalesce(:nextUpdate, next_update),
    calculate_interval = coalesce(:calculateInterval, calculate_interval),
    favorite = coalesce(:favorite, favorite),
    initialized = coalesce(:initialized, initialized),
    episode_flags = coalesce(:episodeFlags, episode_flags),
    date_added = coalesce(:dateAdded, date_added)
WHERE _id = :animeId;

getFavorites:
SELECT
    _id,
    source,
    url,
    title,
    thumbnail_url,
    release,
    status,
    description,
    genres,
    last_update,
    next_update ,
    calculate_interval,
    favorite,
    initialized,
    episode_flags,
    date_added
FROM Anime
WHERE favorite = 1;

getSourceIdsWithNonLibraryAnime:
SELECT source, COUNT(*) AS anime_count
FROM Anime
WHERE favorite = 0
GROUP BY source;

deleteAnimesNotInLibraryBySourceIds:
DELETE FROM Anime
WHERE favorite = 0 AND source IN :sourceIds;

selectLastInsertedRowId:
SELECT last_insert_rowid();
